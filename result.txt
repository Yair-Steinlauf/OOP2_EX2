==================================================
HEADER FILES (.h) FROM INCLUDE DIRECTORY
==================================================

File: BaseField.h
--------------------------------------------------
#pragma once
#include "SFML/Graphics.hpp"




class BaseField{
protected:
	sf::Text m_text;

	bool isClicked = false;
public:
	BaseField();
	
};


File: BaseValidator.h
--------------------------------------------------
#pragma once

template <typename T>
class BaseValidator {
public:
	virtual bool validate(std::string text) = 0;
};

class NameValidator : public BaseValidator<Name>{
public:
	bool validate(std::string text) override;
};



File: BookingForm.h
--------------------------------------------------
﻿#ifndef BOOKINGFORM_H
#define BOOKINGFORM_H

#include <SFML/Graphics.hpp>
#include <vector>
#include <string>
#include <array>
class DialogueManager;

struct PersonalInfo {
    std::string name;
    std::string id;
    std::string address;
    std::string email;
};

class BookingForm {
protected:
    std::vector<std::string> fieldLabels;
    std::vector<std::string> userInput;
    std::size_t activeField = 0;
    sf::Clock cursorTimer;
    bool showCursor = true;

    sf::RenderWindow& window;
    DialogueManager* formManager;
    PersonalInfo personalInfo;

    virtual void setDefaultValues()=0 ;
    void openConfirmationWindow();

public:
    BookingForm(sf::RenderWindow& win, DialogueManager* manager);
    virtual ~BookingForm() = default;
    virtual std::string getFormType() const = 0;
    virtual void render(sf::RenderWindow& window) = 0;
    virtual void handleInput(sf::Event event) = 0;
};

#endif // BOOKINGFORM_H


File: Button.h
--------------------------------------------------
#pragma once
#include "Text.h"

class Button : public Text {
private:
	sf::RectangleShape m_rectangle;
public:
	Button(Text& text, sf::Vector2f size, sf::Color fillColor, sf::Vector2f location);

};

File: CarRentalForm.h
--------------------------------------------------
// CarRentalForm.h - Handles Car Rental Bookings
#ifndef CARRENTALFORM_H
#define CARRENTALFORM_H

#include "BookingForm.h"
#include <array>
class CarRentalForm : public BookingForm {
    std::string pickupLocation, dropOffLocation, carType;
public:
    CarRentalForm(sf::RenderWindow& win, DialogueManager* manager);    
    std::string getFormType() const override;
    void render(sf::RenderWindow& window) override;
    void handleInput(sf::Event event) override;
private:
    void setDefaultValues();
    std::array<std::string, 5> carTypeSelection = { "Economy","Compact","Sedan","SUV","Luxury"};
    int selectedCarType = 0;
};

#endif // CARRENTALFORM_H


File: DatabaseManager.h
--------------------------------------------------
// DatabaseManager.h - Handles Storing and Retrieving Booking Data
#ifndef DATABASEMANAGER_H
#define DATABASEMANAGER_H

#include <string>
#include <vector>

class DatabaseManager {
public:
    void saveBookingData(const std::string& bookingData);
    std::vector<std::string> loadBookings();
};

#endif // DATABASEMANAGER_H


File: DialogueManager.h
--------------------------------------------------
#ifndef DIALOGUEMANAGER_H
#define DIALOGUEMANAGER_H

#include "BookingForm.h"
#include <SFML/Graphics.hpp>
#include <memory>
#include <iostream>

class DialogueManager {
private:
    std::unique_ptr<BookingForm> activeForm;
    sf::RenderWindow formWindow;
    bool isFormOpen;

public:
    DialogueManager();
    void setActiveForm(std::unique_ptr<BookingForm> form);
    void handleFormEvents();
    void closeForm();
};

#endif // DIALOGUEMANAGER_H


File: Engine.h
--------------------------------------------------
﻿#ifndef ENGINE_H
#define ENGINE_H

#include <SFML/Graphics.hpp>
#include "UIManager.h"
#include "DialogueManager.h"

class Engine {
private:
    sf::RenderWindow window;
    UIManager uiManager;
    DialogueManager dialogueManager;

public:
    Engine();
    void run();  
};

#endif // ENGINE_H


File: EventBookingForm.h
--------------------------------------------------
#ifndef EVENTBOOKINGFORM_H
#define EVENTBOOKINGFORM_H

#include "BookingForm.h"

class EventBookingForm : public BookingForm {
public:
    EventBookingForm(sf::RenderWindow& win, DialogueManager* manager);
    std::string getFormType() const override;
    void render(sf::RenderWindow& window) override;
    void handleInput(sf::Event event) override;
private:
    void setDefaultValues() override;
    std::array<std::string, 5> SeatingTypeSelection = { "General Admission", "Front Row", "VIP Section", "Aisle Seat" };
    int selectedSeatingType = 0;
};

#endif // EVENTBOOKINGFORM_H


File: Field.h
--------------------------------------------------
#pragma once
#include "BaseField.h"
#include "BaseValidator.h"
template<typename T>
class Field : public BaseField {
private:
	T m_data;
	BaseValidator<T> m_validator;
public:
	Field(T& data) {
		m_data = data;
	}
	//default validator
	bool validate() {
		return true;
	}
};
struct Name {
	std::string name;
};

struct Date {};
template<>
bool Field<Name>::validate() {
	for (int index = 0; index < m_data.name.length(); index++)
		if (isdigit(m_data.name[index])) return false;
	return true;
}

template<>
bool Field<Date>::validate() {

}
//bool validor<Date>() {
//	//date validation;
//}
//bool validor<std::string>() {
//	//no number validation;
//}



File: FlightBookingForm.h
--------------------------------------------------
﻿#ifndef FLIGHTBOOKINGFORM_H
#define FLIGHTBOOKINGFORM_H

#include "BookingForm.h"
#include <SFML/Graphics.hpp>

class FlightBookingForm : public BookingForm {
private:    
    void setDefaultValues() override;
    
    std::array<std::pair<std::string, bool>, 5> timeSelection = {
        std::make_pair("Morning", false),
        std::make_pair("Noon", false),
        std::make_pair("Evening", false),
        std::make_pair("Night", false),
        std::make_pair("Don't Care", true)  // ✅ Default selection
    };

public:
    FlightBookingForm(sf::RenderWindow& win, DialogueManager* manager);  // ✅ Updated constructor
    std::string getFormType() const override;
    void render(sf::RenderWindow& window) override;
    void handleInput(sf::Event event) override;
};

#endif // FLIGHTBOOKINGFORM_H


File: HotelBookingForm.h
--------------------------------------------------
#ifndef HOTELBOOKINGFORM_H
#define HOTELBOOKINGFORM_H

#include "BookingForm.h"
class HotelBookingForm : public BookingForm {
public:
    HotelBookingForm(sf::RenderWindow& win, DialogueManager* manager);
    std::string getFormType() const override;
    void render(sf::RenderWindow& window) override;
    void handleInput(sf::Event event) override;
private:
    void setDefaultValues() override;
    std::array<std::string, 4> roomTypeSelection = {"Single Room","Double Room","Family Room","Presidential Suite"};
	int selectedRoomType = 0;

};

#endif // HOTELBOOKINGFORM_H


File: Logger.h
--------------------------------------------------
#pragma once
// Logger.h - Handles System Logging
#ifndef LOGGER_H
#define LOGGER_H

#include <fstream>
#include <string>
#include <mutex>
#include <ctime>
#include <iostream>

class Logger {
private:
    static Logger* instance;
    static std::mutex mutex;
    std::ofstream logFile;
    Logger(); // Private constructor to prevent direct instantiation
    Logger(Logger& other) = delete;  //Done: deleted copy constructor
    Logger& operator=(Logger& other) = delete; //Done: deleted assing operator
    

public:
    static Logger* getInstance();
    void log(const std::string& message);
    ~Logger();
};

#endif // LOGGER_H

File: MainObject.h
--------------------------------------------------
#pragma once
#include <SFML/Graphics.hpp>
class MainObject {
protected:
	sf::Text m_text;
	MainObject(std::string text = "", sf::Color color = sf::Color::Black, sf::Text::Style style = sf::Text::Bold
		, unsigned int characterSize = 24, sf::Font font = sf::Font(),
		sf::Vector2f location = sf::Vector2f(0,0));
public:
	virtual void draw(sf::RenderWindow& window);
};

File: NotificationSystem.h
--------------------------------------------------
// NotificationSystem.h - Handles Sending Notifications
#ifndef NOTIFICATIONSYSTEM_H
#define NOTIFICATIONSYSTEM_H

#include <string>

class NotificationSystem {
public:
    void sendNotification(const std::string& message);
};

#endif // NOTIFICATIONSYSTEM_H


File: Text.h
--------------------------------------------------
#pragma once
#include <SFML/Graphics.hpp>
#include "MainObject.h"

class Text : public MainObject {
public:
	Text(std::string text = "", sf::Color color = sf::Color::Black, sf::Text::Style style = sf::Text::Bold
		, unsigned int characterSize = 24, sf::Font font = sf::Font(),
		sf::Vector2f location = sf::Vector2f(0, 0));

	
};

File: TrainBookingForm.h
--------------------------------------------------
﻿#ifndef TRAINBOOKINGFORM_H
#define TRAINBOOKINGFORM_H

#include "BookingForm.h"

class TrainBookingForm : public BookingForm {
public:
    TrainBookingForm(sf::RenderWindow& win, DialogueManager* manager);
    std::string getFormType() const override;
    void render(sf::RenderWindow& window) override;
    void handleInput(sf::Event event) override;
private:
    void setDefaultValues() override; 
    std::array<std::pair<std::string, bool>, 5> timeSelection = {
            std::make_pair("Morning", false),
            std::make_pair("Noon", false),
            std::make_pair("Evening", false),
            std::make_pair("Night", false),
            std::make_pair("Don't Care", true)  // ✅ Default selection
    };
    std::array<std::pair<std::string, bool>, 4> specialSelection = {
        std::make_pair("Quiet Zone", false),
        std::make_pair("Family Section", false),
        std::make_pair("First Class", false) ,
        std::make_pair("None", true)
    };
};

#endif // TRAINBOOKINGFORM_H


File: UIManager.h
--------------------------------------------------
﻿#ifndef UIMANAGER_H
#define UIMANAGER_H

#include <SFML/Graphics.hpp>
#include "DialogueManager.h"

class UIManager {
private:
    sf::RenderWindow& window;
    DialogueManager& formManager;

    // ✅ Fix: Declare buttons and texts
    sf::Font font;
    //TODO: לבנות מחלקת כפתתור, הכוללת מרובע וטקסט
    sf::RectangleShape buttonFlight, buttonHotel, buttonCar, buttonEvent, buttonTrain;
    sf::Text textFlight, textHotel, textCar, textEvent, textTrain;
    
    // ✅ Fix: Declare setupButton
    void setupButton(sf::RectangleShape& button, sf::Text& text, const std::string& label, float y);

public:
    UIManager(sf::RenderWindow& win, DialogueManager& dManager);
    void handleEvent(const sf::Event& event);
    void render();
};

#endif // UIMANAGER_H


==================================================
SOURCE FILES (.cpp) FROM SRC DIRECTORY
==================================================

File: BaseField.cpp
--------------------------------------------------
#include "BaseField.h"

BaseField::BaseField(Button& button) : Button(button)
{

}


File: BookingForm.cpp
--------------------------------------------------
﻿#include "BookingForm.h"
#include "DialogueManager.h"
#include <iostream>
#include <ctime>  // For getting current date

BookingForm::BookingForm(sf::RenderWindow& win, DialogueManager* manager) :window(win), formManager(manager) {
    fieldLabels = { "Name:", "ID:", "Address:", "Email:" };  // ✅ Add common fields
    userInput.resize(fieldLabels.size(), "");  // Initialize input fields
}

void BookingForm::openConfirmationWindow() {
    const std::string& formTitle = getFormType();
    sf::RenderWindow confirmWindow(sf::VideoMode(500, 600), "Confirm " + formTitle);

    sf::Font font;
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");

    bool approved = false;

    while (confirmWindow.isOpen()) {
        sf::Event event;
        while (confirmWindow.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                confirmWindow.close();

            sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);

            if (event.type == sf::Event::MouseButtonPressed) {
                if (mousePos.x >= 280 && mousePos.x <= 400 && mousePos.y >= 300 && mousePos.y <= 345) {
                    confirmWindow.close();
                }
                if (mousePos.x >= 100 && mousePos.x <= 220 && mousePos.y >= 300 && mousePos.y <= 345) {
                    std::cout << formTitle << " Confirmed! Returning to main menu." << std::endl;
                    approved = true;
                    confirmWindow.close();
                }
            }
        }

        confirmWindow.clear(sf::Color(240, 240, 240));

        sf::Text title("Confirm " + formTitle, font, 22);
        title.setFillColor(sf::Color::Black);
        title.setStyle(sf::Text::Bold);
        title.setPosition(130, 20);
        confirmWindow.draw(title);

        std::string bookingInfo;
        for (size_t i = 0; i < fieldLabels.size(); ++i) {
            bookingInfo += fieldLabels[i] + " " + userInput[i] + "\n";
        }

        sf::Text details(bookingInfo, font, 18);
        details.setFillColor(sf::Color::Black);
        details.setPosition(50, 80);
        confirmWindow.draw(details);

        // ✅ Approve Button
        sf::RectangleShape approveButton(sf::Vector2f(120, 40));
        approveButton.setPosition(100, 300);
        approveButton.setFillColor(sf::Color(50, 150, 50));
        confirmWindow.draw(approveButton);

        sf::Text approveText("APPROVE", font, 18);
        approveText.setFillColor(sf::Color::White);
        approveText.setPosition(118, 310);
        confirmWindow.draw(approveText);

        // ✅ Cancel Button
        sf::RectangleShape cancelButton(sf::Vector2f(120, 40));
        cancelButton.setPosition(280, 300);
        cancelButton.setFillColor(sf::Color(180, 0, 0));
        confirmWindow.draw(cancelButton);

        sf::Text cancelText("CANCEL", font, 18);
        cancelText.setFillColor(sf::Color::White);
        cancelText.setPosition(305, 310);
        confirmWindow.draw(cancelText);

        confirmWindow.display();
    }

    if (approved) {
        formManager->closeForm();
    }
}


File: Button.cpp
--------------------------------------------------
#include "Button.h"

Button::Button(Text& text, sf::Vector2f size, sf::Color fillColor, sf::Vector2f location) 
	: Text(text)
{
	m_rectangle.setSize(size);
	m_rectangle.setFillColor(fillColor);
	m_rectangle.setPosition(location);

}

File: CarRentalForm.cpp
--------------------------------------------------
﻿#include "CarRentalForm.h"
#include "DialogueManager.h"
#include <iostream>
#include <ctime>  // For getting current date

CarRentalForm::CarRentalForm(sf::RenderWindow& win, DialogueManager* manager)
    : BookingForm(win, manager) {  // ✅ Calls base constructor
    fieldLabels.insert(fieldLabels.end(), {
        "Pickup Location:",
        "Pickup Date:", "Rent total days:",
        "GPS needed?", "Child Seat needed?",
        "Car Type:"
        });

    userInput.resize(fieldLabels.size(), "");  // ✅ Resize input fields
    setDefaultValues();
}

void CarRentalForm::setDefaultValues() {
    time_t now = time(0);
    tm ltm;
    localtime_s(&ltm, &now);  

    userInput[5] = std::to_string(1900 + ltm.tm_year) + "-" +
        std::to_string(1 + ltm.tm_mon) + "-" +
        std::to_string(ltm.tm_mday);
	userInput[9] = "Economy";
}

std::string CarRentalForm::getFormType() const {
    return "Car Rental";
}

void CarRentalForm::render(sf::RenderWindow& window) {
    sf::Font font;
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");

    window.clear(sf::Color(235, 235, 235));

    // ✅ Title
    sf::Text title("Car Rental Form", font, 26);
    title.setFillColor(sf::Color(20, 20, 20));
    title.setStyle(sf::Text::Bold);
    title.setPosition(20, 10);
    window.draw(title);

    bool cursorVisible = (cursorTimer.getElapsedTime().asMilliseconds() % 1000 < 500);

    // ✅ Render input fields dynamically
    int yOffset = 60;
    for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
        sf::Text label(fieldLabels[i], font, 18);
        label.setFillColor(sf::Color(60, 60, 60));
        label.setPosition(20, yOffset);
        window.draw(label);

        sf::RectangleShape inputBox(sf::Vector2f(250, 35));
        inputBox.setPosition(250, yOffset - 5);
        inputBox.setFillColor(sf::Color::White);
        inputBox.setOutlineThickness(2);
        inputBox.setOutlineColor(i == activeField ? sf::Color(0, 120, 255) : sf::Color(160, 160, 160));
        window.draw(inputBox);

        std::string displayText = userInput[i];
        if (i == activeField && cursorVisible) {
            displayText += "|";
        }

        sf::Text inputText(displayText, font, 16);
        inputText.setFillColor(sf::Color::Black);
        inputText.setPosition(255, yOffset);
        window.draw(inputText);

        yOffset += 50;
    }
    yOffset -= 10;
    float carTypeButtonX = 20;
    for (int i = 0; i < carTypeSelection.size(); ++i) {
        sf::RectangleShape roomButton(sf::Vector2f(90, 30));
        roomButton.setPosition(carTypeButtonX, yOffset);
        roomButton.setFillColor(selectedCarType == i ? sf::Color(0, 120, 255) : sf::Color::White);  // ✅ Highlight selected
        roomButton.setOutlineThickness(2);
        roomButton.setOutlineColor(sf::Color(160, 160, 160));
        window.draw(roomButton);

        sf::Text roomText(carTypeSelection[i], font, 16);
        roomText.setFillColor(selectedCarType == i ? sf::Color::White : sf::Color::Black);
        roomText.setPosition(carTypeButtonX+10, yOffset + 5);
        window.draw(roomText);

        carTypeButtonX += 105;  // ✅ Increased spacing
    }
    // ✅ "Done" and "Cancel" Buttons (positioned dynamically)
    int buttonY = yOffset + 40;

    sf::RectangleShape submitButton(sf::Vector2f(140, 40));
    submitButton.setPosition(20, buttonY);
    submitButton.setFillColor(sf::Color(50, 150, 50));
    window.draw(submitButton);

    sf::Text submitText("DONE", font, 20);
    submitText.setFillColor(sf::Color::White);
    submitText.setPosition(50, buttonY + 10);
    window.draw(submitText);

    sf::RectangleShape cancelButton(sf::Vector2f(140, 40));
    cancelButton.setPosition(200, buttonY);
    cancelButton.setFillColor(sf::Color(180, 0, 0));
    window.draw(cancelButton);

    sf::Text cancelText("CANCEL", font, 20);
    cancelText.setFillColor(sf::Color::White);
    cancelText.setPosition(230, buttonY + 10);
    window.draw(cancelText);
}

void CarRentalForm::handleInput(sf::Event event) {
    if (event.type == sf::Event::TextEntered) {
        if (event.text.unicode == '\b' && !userInput[activeField].empty()) {
            userInput[activeField].pop_back();
        }
        else if (event.text.unicode >= 32 && event.text.unicode < 128) {
            userInput[activeField] += static_cast<char>(event.text.unicode);
        }
    }
    else if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::Tab) {
            activeField = (activeField + 1) % userInput.size();
        }
        if (event.key.code == sf::Keyboard::Return) {
            std::cout << "Entered Data: ";
            for (const auto& field : userInput) std::cout << field << " ";
            std::cout << std::endl;
        }
    }
    else if (event.type == sf::Event::MouseButtonPressed) {
        sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);
        int yOffset = 60;

        for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
            sf::FloatRect inputBoxBounds(240, yOffset - 5, 250, 35);
            if (inputBoxBounds.contains(mousePos)) {
                activeField = i;
                return;
            }
            yOffset += 50;
        }
        yOffset -= 10;
        // ✅ Handle Car Type Button Click          
        float carTypeButtonX = 20;
        for (int i = 0; i < carTypeSelection.size(); ++i) {
            sf::FloatRect timeButtonBounds(carTypeButtonX, yOffset, 90, 30);
            if (timeButtonBounds.contains(mousePos)) {
                selectedCarType = i;
                //Update the "Car Type" input box
                userInput[9] = carTypeSelection[i];

                return;
            }
            carTypeButtonX += 105;  // Move to next button
        }
         yOffset += 40;

        if (mousePos.x >= 20 && mousePos.x <= 160 && mousePos.y >= yOffset && mousePos.y <= yOffset + 40) {
            std::cout << "Car Rental Confirmed!\n";
            openConfirmationWindow();
            return;
        }

        if (mousePos.x >= 200 && mousePos.x <= 340 && mousePos.y >= yOffset && mousePos.y <= yOffset + 40) {
            std::cout << "Cancelled Car Rental\n";
            formManager->closeForm();
            return;
        }
    }
}




File: DatabaseManager.cpp
--------------------------------------------------
// DatabaseManager.cpp - Implements Data Storage
#include "DatabaseManager.h"

void DatabaseManager::saveBookingData(const std::string& bookingData) {
    // Save to file
}

std::vector<std::string> DatabaseManager::loadBookings() {
    // Load from file
    return {};
}


File: DialogueManager.cpp
--------------------------------------------------
﻿#include "DialogueManager.h"

DialogueManager::DialogueManager() : activeForm(nullptr), isFormOpen(false) {}

void DialogueManager::setActiveForm(std::unique_ptr<BookingForm> form) {
    if (isFormOpen) return;  // Prevent multiple openings
    isFormOpen = true;

    activeForm = std::move(form);
    std::cout << "Opening " << activeForm->getFormType() << " form...\n";

    if (!formWindow.isOpen()) {  // ✅ Fix: Prevent reopening if already open

        formWindow.create(sf::VideoMode(650, 700), activeForm->getFormType());
    }
}

void DialogueManager::closeForm() {
    if (formWindow.isOpen()) {
        formWindow.close();   // ✅ Close the window
    }

    if (activeForm) {
        activeForm.reset();  // ✅ Properly delete the form
        activeForm = nullptr; // ✅ Explicitly set to nullptr to prevent dangling pointer
    }

    isFormOpen = false;   // ✅ Allow opening a new form later
    std::cout << "Returned to Main Menu.\n";
}


void DialogueManager::handleFormEvents() {
    if (!isFormOpen || !formWindow.isOpen() || !activeForm) {
        return; // ✅ Avoid handling events if form is closed
    }

    sf::Event event;
    while (formWindow.pollEvent(event)) {
        if (event.type == sf::Event::Closed) {
            closeForm();  // ✅ Use closeForm() instead of just closing the window
            return;
        }

        if (activeForm) {  // ✅ Check again before accessing
            activeForm->handleInput(event);
        }
    }

    if (activeForm) {  // ✅ Prevent access if deleted
        formWindow.clear(sf::Color::White);
        activeForm->render(formWindow);
        formWindow.display();
    }
}



File: Engine.cpp
--------------------------------------------------
﻿#include "Engine.h"

Engine::Engine()
    : window(sf::VideoMode(500, 600), "Massive Travel Booking System"),
       uiManager(window, dialogueManager)  // ✅ Fix: Pass formManager
{
}
void Engine::run() {
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            uiManager.handleEvent(event);
        }

        dialogueManager.handleFormEvents();  // ✅ Ensures form window updates properly

        window.clear(sf::Color(240, 240, 240));
        uiManager.render();
        window.display();
    }
}



File: EventBookingForm.cpp
--------------------------------------------------
﻿#include "EventBookingForm.h"
#include "DialogueManager.h"
#include <iostream>
#include <ctime>  // For getting current date

EventBookingForm::EventBookingForm(sf::RenderWindow& win, DialogueManager* manager)
    : BookingForm(win, manager) {  // ✅ Calls base constructor
    fieldLabels.insert(fieldLabels.end(), {
        "Event Name:", "Venue:", "Event Date:",
        "Number of Tickets:","Wheelchair Accessibility?", "Seating Preference:"
        });

    userInput.resize(fieldLabels.size(), "");  // ✅ Resize input fields
    setDefaultValues();
}

void EventBookingForm::setDefaultValues() {
    time_t now = time(0);
    tm ltm;
    localtime_s(&ltm, &now);  // ✅ Safe alternative to localtime()

    userInput[6] = std::to_string(1900 + ltm.tm_year) + "-" +
        std::to_string(1 + ltm.tm_mon) + "-" +
        std::to_string(ltm.tm_mday);
    userInput[9] = "General Admission";
}

std::string EventBookingForm::getFormType() const {
    return "Event Booking";
}

void EventBookingForm::render(sf::RenderWindow& window) {
    sf::Font font;
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");

    window.clear(sf::Color(235, 235, 235));

    // ✅ Title
    sf::Text title("Event Booking Form", font, 26);
    title.setFillColor(sf::Color(20, 20, 20));
    title.setStyle(sf::Text::Bold);
    title.setPosition(20, 10);
    window.draw(title);

    bool cursorVisible = (cursorTimer.getElapsedTime().asMilliseconds() % 1000 < 500);

    // ✅ Render input fields dynamically
    int yOffset = 60;
    for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
        sf::Text label(fieldLabels[i], font, 18);
        label.setFillColor(sf::Color(60, 60, 60));
        label.setPosition(20, yOffset);
        window.draw(label);

        sf::RectangleShape inputBox(sf::Vector2f(250, 35));
        inputBox.setPosition(250, yOffset - 5);
        inputBox.setFillColor(sf::Color::White);
        inputBox.setOutlineThickness(2);
        inputBox.setOutlineColor(i == activeField ? sf::Color(0, 120, 255) : sf::Color(160, 160, 160));
        window.draw(inputBox);

        std::string displayText = userInput[i];
        if (i == activeField && cursorVisible) {
            displayText += "|";
        }

        sf::Text inputText(displayText, font, 16);
        inputText.setFillColor(sf::Color::Black);
        inputText.setPosition(255, yOffset);
        window.draw(inputText);

        yOffset += 50;
    }
    yOffset -= 10;
    float seatingTypeButtonX = 10;
    for (int i = 0; i < SeatingTypeSelection.size(); ++i) {
        sf::RectangleShape seatButton(sf::Vector2f(150, 30));
        seatButton.setPosition(seatingTypeButtonX, yOffset);
        seatButton.setFillColor(selectedSeatingType == i ? sf::Color(0, 120, 255) : sf::Color::White);  // ✅ Highlight selected
        seatButton.setOutlineThickness(2);
        seatButton.setOutlineColor(sf::Color(160, 160, 160));
        window.draw(seatButton);

        sf::Text roomText(SeatingTypeSelection[i], font, 16);
        roomText.setFillColor(selectedSeatingType == i ? sf::Color::White : sf::Color::Black);
        roomText.setPosition(seatingTypeButtonX + 5, yOffset + 5);
        window.draw(roomText);

        seatingTypeButtonX += 160;  // ✅ Increased spacing
    }
    // ✅ "Done" and "Cancel" Buttons (positioned dynamically)
     yOffset += 50;

    sf::RectangleShape submitButton(sf::Vector2f(140, 40));
    submitButton.setPosition(20, yOffset);
    submitButton.setFillColor(sf::Color(50, 150, 50));
    window.draw(submitButton);

    sf::Text submitText("DONE", font, 20);
    submitText.setFillColor(sf::Color::White);
    submitText.setPosition(50, yOffset + 10);
    window.draw(submitText);

    sf::RectangleShape cancelButton(sf::Vector2f(140, 40));
    cancelButton.setPosition(200, yOffset);
    cancelButton.setFillColor(sf::Color(180, 0, 0));
    window.draw(cancelButton);

    sf::Text cancelText("CANCEL", font, 20);
    cancelText.setFillColor(sf::Color::White);
    cancelText.setPosition(230, yOffset + 10);
    window.draw(cancelText);
}

void EventBookingForm::handleInput(sf::Event event) {
    if (event.type == sf::Event::TextEntered) {
        if (event.text.unicode == '\b' && !userInput[activeField].empty()) {
            userInput[activeField].pop_back();
        }
        else if (event.text.unicode >= 32 && event.text.unicode < 128) {
            userInput[activeField] += static_cast<char>(event.text.unicode);
        }
    }
    else if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::Tab) {
            activeField = (activeField + 1) % userInput.size();
        }
        if (event.key.code == sf::Keyboard::Return) {
            std::cout << "Entered Data: ";
            for (const auto& field : userInput) std::cout << field << " ";
            std::cout << std::endl;
        }
    }
    else if (event.type == sf::Event::MouseButtonPressed) {
        sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);
        int yOffset = 60;

        for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
            sf::FloatRect inputBoxBounds(250, yOffset - 5, 250, 35);
            if (inputBoxBounds.contains(mousePos)) {
                activeField = i;
                return;
            }
            yOffset += 50;
        }
        // ✅ Handle Seating Type Button Click     
        yOffset -= 10;    
        float seatingButtonX = 10;
        for (int i = 0; i < SeatingTypeSelection.size(); ++i) {
            sf::FloatRect timeButtonBounds(seatingButtonX, yOffset, 150, 30);
            if (timeButtonBounds.contains(mousePos)) {
                selectedSeatingType = i;
                //Update the "Room Type" input box
                userInput[9] = SeatingTypeSelection[i];

                return;
            }
            seatingButtonX += 160;  // Move to next button
        }

        yOffset += 50;

        if (mousePos.x >= 20 && mousePos.x <= 160 && mousePos.y >= yOffset && mousePos.y <= yOffset + 40) {
            std::cout << "Event Booking Confirmed!\n";
            openConfirmationWindow();
            return;
        }

        if (mousePos.x >= 200 && mousePos.x <= 340 && mousePos.y >= yOffset && mousePos.y <= yOffset + 40) {
            std::cout << "Cancelled Event Booking\n";
            formManager->closeForm();
            return;
        }
    }
}


File: FlightBookingForm.cpp
--------------------------------------------------
﻿#include "FlightBookingForm.h"
#include "DialogueManager.h"
#include <iostream>
#include <ctime>  // For getting current date

FlightBookingForm::FlightBookingForm(sf::RenderWindow& win, DialogueManager* manager)
    : BookingForm(win,manager) {  // ✅ Calls base constructor
    fieldLabels.insert(fieldLabels.end(), { "Departure Airport:", "Arrival Airport:",
                   "Departure Date:",
                   "Preferred Time:" });
    userInput.resize(fieldLabels.size(), "");  // Resize to include all fields
    setDefaultValues();
}
    

void FlightBookingForm::setDefaultValues() {
    time_t now = time(0);
    tm ltm;
    localtime_s(&ltm, &now);  // ✅ Safe alternative to localtime()

    userInput[6] = std::to_string(1900 + ltm.tm_year) + "-" +
        std::to_string(1 + ltm.tm_mon) + "-" +
        std::to_string(ltm.tm_mday);

	userInput[7] = "Don't Care";  // ✅ Default time selection
}

std::string FlightBookingForm::getFormType() const {
    return "Flight Booking";
}

void FlightBookingForm::render(sf::RenderWindow& window) {
    sf::Font font;
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");
      
    window.clear(sf::Color(235, 235, 235));

    // ✅ Title
    sf::Text title("Flight Booking Form", font, 26);
    title.setFillColor(sf::Color(20, 20, 20));
    title.setStyle(sf::Text::Bold);
    title.setPosition(20, 10);
    window.draw(title);

    bool cursorVisible = (cursorTimer.getElapsedTime().asMilliseconds() % 1000 < 500);

    // ✅ Loop through form fields and render
    int yOffset = 60;
    for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
        sf::Text label(fieldLabels[i], font, 18);
        label.setFillColor(sf::Color(60, 60, 60));
        label.setPosition(20, yOffset);
        window.draw(label);

        sf::RectangleShape inputBox(sf::Vector2f(350, 35));
        inputBox.setPosition(240, yOffset - 5);
        inputBox.setFillColor(sf::Color::White);
        inputBox.setOutlineThickness(2);
        inputBox.setOutlineColor(i == activeField ? sf::Color(0, 120, 255) : sf::Color(160, 160, 160));
        window.draw(inputBox);

        std::string displayText = userInput[i];
        if (i == activeField && cursorVisible) {
            displayText += "|";
        }

        sf::Text inputText(displayText, font, 16);
        inputText.setFillColor(sf::Color::Black);
        inputText.setPosition(245, yOffset);
        window.draw(inputText);  

        yOffset += 50;
    }

    // ✅ Time Selection Buttons
    //   
    float timeButtonX = 10;
    for (std::size_t i = 0; i < timeSelection.size(); ++i) {
        sf::RectangleShape timeButton(sf::Vector2f(100, 30));
        timeButton.setPosition(timeButtonX, yOffset);
        timeButton.setFillColor(timeSelection[i].second ? sf::Color(0, 120, 255) : sf::Color::White);
        timeButton.setOutlineThickness(2);
        timeButton.setOutlineColor(sf::Color(160, 160, 160));
        window.draw(timeButton);

        sf::Text timeText(timeSelection[i].first, font, 16);
        timeText.setFillColor(timeSelection[i].second ? sf::Color::White : sf::Color::Black);
        timeText.setPosition(timeButtonX + 10, yOffset+2);
        window.draw(timeText);

        timeButtonX += 110;  // ✅ Increased spacing between buttons
    }


    // ✅ "Done" Button
    sf::RectangleShape submitButton(sf::Vector2f(140, 40));
    submitButton.setPosition(20, 550);
    submitButton.setFillColor(sf::Color(50, 150, 50));  // ✅ Green color
    window.draw(submitButton);

    sf::Text submitText("DONE", font, 20);
    submitText.setFillColor(sf::Color::White);
    submitText.setPosition(50, 560);
    window.draw(submitText);

    // ✅ "Cancel" Button
    sf::RectangleShape cancelButton(sf::Vector2f(140, 40));
    cancelButton.setPosition(200, 550);
    cancelButton.setFillColor(sf::Color(180, 0, 0));  // ✅ Red color
    window.draw(cancelButton);

    sf::Text cancelText("CANCEL", font, 20);
    cancelText.setFillColor(sf::Color::White);
    cancelText.setPosition(230, 560);
    window.draw(cancelText);

}


void FlightBookingForm::handleInput(sf::Event event) {
    if (event.type == sf::Event::TextEntered) {
        if (event.text.unicode == '\b' && !userInput[activeField].empty()) { 
            userInput[activeField].pop_back();  // ✅ Handle Backspace
        } 
        else if (event.text.unicode >= 32 && event.text.unicode < 128) {
            userInput[activeField] += static_cast<char>(event.text.unicode);  // ✅ Append typed character
        }
    } 
    else if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::Tab) {
            activeField = (activeField + 1) % userInput.size();  // ✅ Move to next input field
        }
        if (event.key.code == sf::Keyboard::Return) {
            std::cout << "Entered Data: ";
            for (const auto& field : userInput) std::cout << field << " ";
            std::cout << std::endl;
        }
    }
    else if (event.type == sf::Event::MouseButtonPressed) {
        sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);

        int yOffset = 60;  // ✅ Start from the top

        for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
            sf::FloatRect inputBoxBounds(260, yOffset - 5, 250, 35);  // ✅ Uses dynamic positioning
            if (inputBoxBounds.contains(mousePos)) {
                activeField = i;
                return;
            }
            yOffset += 50;  // ✅ Move down dynamically (same logic as `render()`)
        }


        // ✅ Handle Time Selection Button Click          
        float timeButtonX = 10;
               
        for (int i = 0; i < 5; ++i) {           
            sf::FloatRect timeButtonBounds(timeButtonX, yOffset, 100, 30);
            if (timeButtonBounds.contains(mousePos)) {                
                timeSelection[i].second = !timeSelection[i].second;
                //Update the "Preferred Time" input box
                userInput[7] = "";
                for (int i = 0; i < 5; ++i) {
                    if (timeSelection[i].second) {
                        if (!userInput[7].empty()) userInput[7] += "| ";  // ✅ Separate multiple selections
                        userInput[7] += timeSelection[i].first;
                    }
                }

                return;
            }
            timeButtonX += 110;  // Move to next button
            
            
        }
    

        // ✅ Handle "Done" Button Click
        if (mousePos.x >= 20 && mousePos.x <= 160 && mousePos.y >= 550 && mousePos.y <= 590) {
            std::cout << "Flight Booking Confirmed!\n";
            openConfirmationWindow();  // ✅ Open confirmation
            return;
        }

        // ✅ Handle "Cancel" Button Click
        if (mousePos.x >= 200 && mousePos.x <= 340 && mousePos.y >= 550 && mousePos.y <= 590) {
            std::cout << "Cancelled Flight Booking\n";
            formManager->closeForm();
            return;
        }
    }

}








File: HotelBookingForm.cpp
--------------------------------------------------
﻿#include "HotelBookingForm.h"
#include "DialogueManager.h"
#include <iostream>
#include <ctime>  // For getting current date

HotelBookingForm::HotelBookingForm(sf::RenderWindow& win, DialogueManager* manager)
    : BookingForm(win, manager) {  // ✅ Calls base constructor
    fieldLabels.insert(fieldLabels.end(), {
        "Hotel Name:", "Check-in Date:", "Check-out Date:",
        "Number of Guests:", "Room Type:"
        });

    userInput.resize(fieldLabels.size(), "");  // ✅ Resize input fields
    setDefaultValues();
}

void HotelBookingForm::setDefaultValues() {
    time_t now = time(0);
    tm ltm;
    localtime_s(&ltm, &now);  // ✅ Safe alternative to localtime()

    userInput[5] = userInput[6] = std::to_string(1900 + ltm.tm_year) + "-" +
        std::to_string(1 + ltm.tm_mon) + "-" +
        std::to_string(ltm.tm_mday);
    userInput[8]="Single Room";
}

std::string HotelBookingForm::getFormType() const {
    return "Hotel Booking";
}

void HotelBookingForm::render(sf::RenderWindow& window) {
    sf::Font font;
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");

    window.clear(sf::Color(235, 235, 235));

    // ✅ Title
    sf::Text title("Hotel Booking Form", font, 26);
    title.setFillColor(sf::Color(20, 20, 20));
    title.setStyle(sf::Text::Bold);
    title.setPosition(20, 10);
    window.draw(title);

    bool cursorVisible = (cursorTimer.getElapsedTime().asMilliseconds() % 1000 < 500);

    // ✅ Render input fields dynamically
    int yOffset = 60;
    for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
        sf::Text label(fieldLabels[i], font, 18);
        label.setFillColor(sf::Color(60, 60, 60));
        label.setPosition(20, yOffset);
        window.draw(label);

        sf::RectangleShape inputBox(sf::Vector2f(250, 35));
        inputBox.setPosition(240, yOffset - 5);
        inputBox.setFillColor(sf::Color::White);
        inputBox.setOutlineThickness(2);
        inputBox.setOutlineColor(i == activeField ? sf::Color(0, 120, 255) : sf::Color(160, 160, 160));
        window.draw(inputBox);

        std::string displayText = userInput[i];
        if (i == activeField && cursorVisible) {
            displayText += "|";
        }

        sf::Text inputText(displayText, font, 16);
        inputText.setFillColor(sf::Color::Black);
        inputText.setPosition(245, yOffset);
        window.draw(inputText);

        yOffset += 50;
    }
    float roomTypeButtonX = 10;
    for (int i = 0; i < roomTypeSelection.size(); ++i) {
        sf::RectangleShape roomButton(sf::Vector2f(150, 30));
        roomButton.setPosition(roomTypeButtonX, yOffset);
        roomButton.setFillColor(selectedRoomType==i ? sf::Color(0, 120, 255) : sf::Color::White);  // ✅ Highlight selected
        roomButton.setOutlineThickness(2);
        roomButton.setOutlineColor(sf::Color(160, 160, 160));
        window.draw(roomButton);

        sf::Text roomText(roomTypeSelection[i], font, 16);
        roomText.setFillColor(selectedRoomType == i ? sf::Color::White : sf::Color::Black);
        roomText.setPosition(roomTypeButtonX + 10, yOffset + 5);
        window.draw(roomText);

        roomTypeButtonX += 160;  // ✅ Increased spacing
    }
    // ✅ "Done" Button
    sf::RectangleShape submitButton(sf::Vector2f(140, 40));
    submitButton.setPosition(20, 570);
    submitButton.setFillColor(sf::Color(50, 150, 50));  // ✅ Green color
    window.draw(submitButton);

    sf::Text submitText("DONE", font, 20);
    submitText.setFillColor(sf::Color::White);
    submitText.setPosition(50, 580);
    window.draw(submitText);

    // ✅ "Cancel" Button
    sf::RectangleShape cancelButton(sf::Vector2f(140, 40));
    cancelButton.setPosition(200, 570);
    cancelButton.setFillColor(sf::Color(180, 0, 0));  // ✅ Red color
    window.draw(cancelButton);

    sf::Text cancelText("CANCEL", font, 20);
    cancelText.setFillColor(sf::Color::White);
    cancelText.setPosition(230, 580);
    window.draw(cancelText);

}

void HotelBookingForm::handleInput(sf::Event event) {
    if (event.type == sf::Event::TextEntered) {
        if (event.text.unicode == '\b' && !userInput[activeField].empty()) {
            userInput[activeField].pop_back();
        }
        else if (event.text.unicode >= 32 && event.text.unicode < 128) {
            userInput[activeField] += static_cast<char>(event.text.unicode);
        }
    }
    else if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::Tab) {
            activeField = (activeField + 1) % userInput.size();
        }
        if (event.key.code == sf::Keyboard::Return) {
            std::cout << "Entered Data: ";
            for (const auto& field : userInput) std::cout << field << " ";
            std::cout << std::endl;
        }
    }
    else if (event.type == sf::Event::MouseButtonPressed) {
        sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);

        int yOffset = 60;  // ✅ Start from the top

        for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
            sf::FloatRect inputBoxBounds(260, yOffset - 5, 250, 35);  // ✅ Uses dynamic positioning
            if (inputBoxBounds.contains(mousePos)) {
                activeField = i;
                return;
            }
            yOffset += 50;  // ✅ Move down dynamically (same logic as `render()`)
        }


        // ✅ Handle Room Type Button Click          
        float roomButtonX = 10;
                for (int i = 0; i < roomTypeSelection.size(); ++i) {
            sf::FloatRect timeButtonBounds(roomButtonX, yOffset, 150, 30);
            if (timeButtonBounds.contains(mousePos)) {
				selectedRoomType = i;
                //Update the "Room Type" input box
                userInput[8] = roomTypeSelection[i];             

                return;
            }
            roomButtonX += 160;  // Move to next button
        }


        // ✅ Handle "Done" Button Click
        if (mousePos.x >= 20 && mousePos.x <= 160 && mousePos.y >= 570 && mousePos.y <= 610) {
            std::cout << "Flight Booking Confirmed!\n";
            openConfirmationWindow();  // ✅ Open confirmation
            return;
        }

        // ✅ Handle "Cancel" Button Click
        if (mousePos.x >= 200 && mousePos.x <= 340 && mousePos.y >= 570 && mousePos.y <= 610) {
            std::cout << "Cancelled Flight Booking\n";
            formManager->closeForm();
            return;
        }
    }
}


File: Logger.cpp
--------------------------------------------------
// Logger.cpp - Implements System Logging
#include "Logger.h"

Logger* Logger::instance = nullptr;
std::mutex Logger::mutex;

Logger::Logger() {
    logFile.open("system.log", std::ios::app);
    if (!logFile) {
        std::cerr << "Error: Unable to open log file." << std::endl;
    }
}

Logger* Logger::getInstance() {
    if (instance == nullptr) {
        std::lock_guard<std::mutex> lock(mutex);
        if (instance == nullptr) {
            instance = new Logger();
        }
    }
    return instance;
}

void Logger::log(const std::string& message) {
    std::lock_guard<std::mutex> lock(mutex);
    if (logFile) {
        std::time_t now = std::time(nullptr);
        char timeBuffer[26]; // Buffer for formatted time
        ctime_s(timeBuffer, sizeof(timeBuffer), &now);
        logFile << "[" << timeBuffer << "] " << message << std::endl;

    }
}

Logger::~Logger() {
    if (logFile) {
        logFile.close();
    }
}


File: MainObject.cpp
--------------------------------------------------
#include "MainObject.h"

MainObject::MainObject(std::string text = "", sf::Color color = sf::Color::Black, sf::Text::Style style = sf::Text::Bold
	, unsigned int characterSize = 24, sf::Font font = sf::Font(),
	sf::Vector2f location = sf::Vector2f(0, 0))
{
	m_text.setString(text);
	m_text.setColor(color);
	m_text.setStyle(style);
	m_text.setCharacterSize(characterSize);
	m_text.setFont(font);
	m_text.setPosition(location);
}

void MainObject::draw(sf::RenderWindow& window)
{
	window.draw(m_text);
}


File: NotificationSystem.cpp
--------------------------------------------------
// NotificationSystem.cpp - Implements Notification Sending
#include "NotificationSystem.h"

void NotificationSystem::sendNotification(const std::string& message) {
    // Send email or push notification
}


File: Text.cpp
--------------------------------------------------
#include "Text.h"

Text::Text(std::string text = "", sf::Color color = sf::Color::Black, sf::Text::Style style = sf::Text::Bold
	, unsigned int characterSize = 24, sf::Font font = sf::Font(),
	sf::Vector2f location = sf::Vector2f(0, 0)) : MainObject(text, color, style, characterSize, font)
{
}




File: TrainBookingForm.cpp
--------------------------------------------------
﻿#include "TrainBookingForm.h"
#include "DialogueManager.h"
#include <iostream>
#include <ctime>  // For getting current date

TrainBookingForm::TrainBookingForm(sf::RenderWindow& win, DialogueManager* manager)
    : BookingForm(win, manager) {  // ✅ Calls base constructor
    fieldLabels.insert(fieldLabels.end(), {
        "Departure Station:", "Arrival Station:", "Departure Date:",
        "Number of Passengers:","Preferred Time:", "Special Requests:", 
        });

    userInput.resize(fieldLabels.size(), "");  // ✅ Resize input fields
    setDefaultValues();
}

void TrainBookingForm::setDefaultValues() {
    time_t now = time(0);
    tm ltm;
    localtime_s(&ltm, &now);  // ✅ Safe alternative to localtime()

    userInput[6] = std::to_string(1900 + ltm.tm_year) + "-" +
        std::to_string(1 + ltm.tm_mon) + "-" +
        std::to_string(ltm.tm_mday);
	userInput[8] = "Don't Care";
    userInput[9] = "None";
}

std::string TrainBookingForm::getFormType() const {
    return "Train Booking";
}

void TrainBookingForm::render(sf::RenderWindow& window) {
    sf::Font font;
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");

    window.clear(sf::Color(235, 235, 235));

    // ✅ Title
    sf::Text title("Train Booking Form", font, 26);
    title.setFillColor(sf::Color(20, 20, 20));
    title.setStyle(sf::Text::Bold);
    title.setPosition(20, 10);
    window.draw(title);

    bool cursorVisible = (cursorTimer.getElapsedTime().asMilliseconds() % 1000 < 500);

    // ✅ Render input fields dynamically
    int yOffset = 60;
    for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
        sf::Text label(fieldLabels[i], font, 18);
        label.setFillColor(sf::Color(60, 60, 60));
        label.setPosition(20, yOffset);
        window.draw(label);

        sf::RectangleShape inputBox(sf::Vector2f(350, 35));
        inputBox.setPosition(240, yOffset - 5);
        inputBox.setFillColor(sf::Color::White);
        inputBox.setOutlineThickness(2);
        inputBox.setOutlineColor(i == activeField ? sf::Color(0, 120, 255) : sf::Color(160, 160, 160));
        window.draw(inputBox);

        std::string displayText = userInput[i];
        if (i == activeField && cursorVisible) {
            displayText += "|";
        }

        sf::Text inputText(displayText, font, 16);
        inputText.setFillColor(sf::Color::Black);
        inputText.setPosition(245, yOffset);
        window.draw(inputText);

        if (i == 8)
        {
            yOffset += 40;
            // ✅ Time Selection Buttons
            float timeButtonX = 10;
            for (std::size_t i = 0; i < timeSelection.size(); ++i) {
                sf::RectangleShape timeButton(sf::Vector2f(100, 30));
                timeButton.setPosition(timeButtonX, yOffset);
                timeButton.setFillColor(timeSelection[i].second ? sf::Color(0, 120, 255) : sf::Color::White);
                timeButton.setOutlineThickness(2);
                timeButton.setOutlineColor(sf::Color(160, 160, 160));
                window.draw(timeButton);

                sf::Text timeText(timeSelection[i].first, font, 16);
                timeText.setFillColor(timeSelection[i].second ? sf::Color::White : sf::Color::Black);
                timeText.setPosition(timeButtonX + 10, yOffset + 2);
                window.draw(timeText);

                timeButtonX += 110;  // ✅ Increased spacing between buttons
            }
        } 
        if (i == 9)
        {
            yOffset += 40;
			// ✅ Special Selection Buttons
            float specialX = 10;
            for (std::size_t i = 0; i < specialSelection.size(); ++i) {
                sf::RectangleShape sButton(sf::Vector2f(150, 30));
                sButton.setPosition(specialX, yOffset);
                sButton.setFillColor(specialSelection[i].second ? sf::Color(0, 120, 255) : sf::Color::White);
                sButton.setOutlineThickness(2);
                sButton.setOutlineColor(sf::Color(160, 160, 160));
                window.draw(sButton);

                sf::Text timeText(specialSelection[i].first, font, 16);
                timeText.setFillColor(specialSelection[i].second ? sf::Color::White : sf::Color::Black);
                timeText.setPosition(specialX + 10, yOffset + 2);
                window.draw(timeText);

                specialX+= 160;  // ✅ Increased spacing between buttons
            }
        }
       
      yOffset += 50;
    }
   
    // ✅ "Done" and "Cancel" Buttons (positioned dynamically)
    yOffset +=10;

    sf::RectangleShape submitButton(sf::Vector2f(140, 40));
    submitButton.setPosition(20, yOffset);
    submitButton.setFillColor(sf::Color(50, 150, 50));
    window.draw(submitButton);

    sf::Text submitText("DONE", font, 20);
    submitText.setFillColor(sf::Color::White);
    submitText.setPosition(50, yOffset + 10);
    window.draw(submitText);

    sf::RectangleShape cancelButton(sf::Vector2f(140, 40));
    cancelButton.setPosition(200, yOffset);
    cancelButton.setFillColor(sf::Color(180, 0, 0));
    window.draw(cancelButton);

    sf::Text cancelText("CANCEL", font, 20);
    cancelText.setFillColor(sf::Color::White);
    cancelText.setPosition(230, yOffset + 10);
    window.draw(cancelText);
}

void TrainBookingForm::handleInput(sf::Event event) {
    if (event.type == sf::Event::TextEntered) {
        if (event.text.unicode == '\b' && !userInput[activeField].empty()) {
            userInput[activeField].pop_back();
        }
        else if (event.text.unicode >= 32 && event.text.unicode < 128) {
            userInput[activeField] += static_cast<char>(event.text.unicode);
        }
    }
    else if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::Tab) {
            activeField = (activeField + 1) % userInput.size();
        }
        if (event.key.code == sf::Keyboard::Return) {
            std::cout << "Entered Data: ";
            for (const auto& field : userInput) std::cout << field << " ";
            std::cout << std::endl;
        }
    }
    else if (event.type == sf::Event::MouseButtonPressed) {
        sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);
        int yOffset = 60, timeOffset = 0, specialOffset = 0;
        for (std::size_t i = 0; i < fieldLabels.size(); ++i) {
            sf::FloatRect inputBoxBounds(240, yOffset - 5, 250, 35);
            if (inputBoxBounds.contains(mousePos)) {
                activeField = i;
                return;
            }
            if (i ==8)            
                timeOffset= yOffset +=40;
            if (i==9)
                specialOffset = yOffset +=40;
            yOffset += 50;
        }
        // ✅ Handle Time Selection Button Click          
        float timeButtonX = 10;

		for (int i = 0; i < timeSelection.size(); ++i) {
            sf::FloatRect timeButtonBounds(timeButtonX, timeOffset, 100, 30);
            if (timeButtonBounds.contains(mousePos)) {
                timeSelection[i].second = !timeSelection[i].second;
                //Update the "Preferred Time" input box
                userInput[8] = "";
                for (int i = 0; i < timeSelection.size(); ++i) {
                    if (timeSelection[i].second) {
                        if (!userInput[8].empty()) userInput[8] += "| ";  // ✅ Separate multiple selections
                        userInput[8] += timeSelection[i].first;
                    }
                }

                return;
            }
            timeButtonX += 110;  // Move to next button
        }
        // ✅ Handle Special Selection Botton click
        float sButtonX = 10;

		for (int i = 0; i < specialSelection.size(); ++i) {
            sf::FloatRect specialSelectionBounds(sButtonX, specialOffset, 150, 30);
            if (specialSelectionBounds.contains(mousePos)) {
                specialSelection[i].second = !specialSelection[i].second;
                //Update the "Preferred Time" input box
                userInput[9] = "";
                for (int i = 0; i < specialSelection.size(); ++i) {
                    if (specialSelection[i].second) {
                        if (!userInput[9].empty()) userInput[9] += "| ";  // ✅ Separate multiple selections
                        userInput[9] += specialSelection[i].first;
                    }
                }

                return;
            }
            sButtonX += 160;  // Move to next button
            
        }
        yOffset += 10;

        if (mousePos.x >= 20 && mousePos.x <= 160 && mousePos.y >= yOffset && mousePos.y <= yOffset + 40) {
            std::cout << "Train Booking Confirmed!\n";
            openConfirmationWindow();
            return;
        }

        if (mousePos.x >= 200 && mousePos.x <= 340 && mousePos.y >= yOffset && mousePos.y <= yOffset + 40) {
            std::cout << "Cancelled Train Booking\n";
            formManager->closeForm();
            return;
        }
    }
}


File: UIManager.cpp
--------------------------------------------------
﻿#include "UIManager.h"
#include <iostream>
#include "FlightBookingForm.h"
#include "HotelBookingForm.h"
#include "CarRentalForm.h"
#include "EventBookingForm.h"
#include "TrainBookingForm.h"

UIManager::UIManager(sf::RenderWindow& win, DialogueManager& dManager)
    : window(win), formManager(dManager) {

 
    font.loadFromFile("C:/Windows/Fonts/arialbd.ttf");
    
    
    // ✅ Fix: Setup all buttons using setupButton()
    setupButton(buttonFlight, textFlight, "Flight Booking", 150);
    setupButton(buttonHotel, textHotel, "Hotel Booking", 220);
    setupButton(buttonCar, textCar, "Car Rental", 290);
    setupButton(buttonEvent, textEvent, "Event Booking", 360);
    setupButton(buttonTrain, textTrain, "Train Booking", 430);

}

// ✅ Fix: Define `setupButton()`
void UIManager::setupButton(sf::RectangleShape& button, sf::Text& text, const std::string& label, float y) {
    button.setSize(sf::Vector2f(300, 50));
    button.setFillColor(sf::Color::Blue);
    button.setPosition(100, y);
    
    text.setFont(font);  // ✅ Fix: Use class member `font`
    text.setString(label);
    text.setCharacterSize(24);
    text.setFillColor(sf::Color::White);
    text.setPosition(120, y + 10);
}

// ✅ Fix: Ensure render() uses class member buttons
void UIManager::render() {
    sf::Text title("Travel Booking System", font, 30);
    title.setFillColor(sf::Color::Black);
    title.setStyle(sf::Text::Bold);
    title.setPosition(80, 20);
    window.draw(title);

    // ✅ Draw all buttons
    window.draw(buttonFlight);
    window.draw(textFlight);
    window.draw(buttonHotel);
    window.draw(textHotel);
    window.draw(buttonCar);
    window.draw(textCar);
    window.draw(buttonEvent);
    window.draw(textEvent);
    window.draw(buttonTrain);
    window.draw(textTrain);
}


void UIManager::handleEvent(const sf::Event& event) {
    if (event.type == sf::Event::MouseButtonPressed) {
        sf::Vector2f mousePos(event.mouseButton.x, event.mouseButton.y);
        std::cout << "Mouse Clicked at: " << mousePos.x << ", " << mousePos.y << std::endl;  // ✅ Debug log

        if (buttonFlight.getGlobalBounds().contains(mousePos)) {
            std::cout << "Flight Booking Button Clicked!" << std::endl;  // ✅ Debug
            formManager.setActiveForm(std::make_unique<FlightBookingForm>(window, &formManager));
        }

        if (buttonHotel.getGlobalBounds().contains(mousePos)) {
            std::cout << "Hotel Booking Button Clicked!" << std::endl;
            formManager.setActiveForm(std::make_unique<HotelBookingForm>(window, &formManager));
        }

        if (buttonCar.getGlobalBounds().contains(mousePos)) {
            std::cout << "Car Rental Button Clicked!" << std::endl;
            formManager.setActiveForm(std::make_unique<CarRentalForm>(window, &formManager));
        }

        if (buttonEvent.getGlobalBounds().contains(mousePos)) {
            std::cout << "Event Booking Button Clicked!" << std::endl;
            formManager.setActiveForm(std::make_unique<EventBookingForm>(window, &formManager));
        }

        if (buttonTrain.getGlobalBounds().contains(mousePos)) {
            std::cout << "Train Booking Button Clicked!" << std::endl;
            formManager.setActiveForm(std::make_unique<TrainBookingForm>(window, &formManager));
        }
        
    }
}


File: main.cpp
--------------------------------------------------
﻿// main.cpp - Entry Point
#include "Engine.h"
#include <SFML/Graphics.hpp>

int main() {
    Engine engine;  //  Create the Engine instance
    engine.run();   //  Start the loop inside Engine
    return 0;
}



